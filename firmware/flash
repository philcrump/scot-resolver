#!/usr/bin/env bash

source_dir="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
cd "$source_dir"

COLOUR_GREEN='\033[0;32m'
COLOUR_YELLOW='\033[1;33m'
COLOUR_PURPLE='\033[0;35m'
COLOUR_RED='\033[0;31m'
COLOUR_OFF='\033[0;00m'
CLEAR_LINE='\033[2K'

_ERROR_="${COLOUR_RED}[ERROR]${COLOUR_OFF}"
_INFO_="${COLOUR_PURPLE}[INFO]${COLOUR_OFF}"
_DEBUG_="${COLOUR_YELLOW}[DEBUG]${COLOUR_OFF}"

opt_sound=false;
opt_power=false;

flashtool="arm-none-eabi-gdb"
programmer=false

locate_black_magic() {
  probe="`ls 2>/dev/null -Ub1 -- /dev/serial/by-id/usb-Black_Sphere_Technologies_Black_Magic_Probe_*-if00 | head -n 1`";
  if ! [ -z "$probe" ];
  then
    echo "$probe";
    return 0;
  fi
  return 1;
}

flash_target() {
  programmer_power="disable"
  if $opt_power; then
    programmer_power="enable";
  fi

	flash_cmd="$flashtool -q --batch \
    -ex 'file '$binary                          \
    -ex 'target extended-remote '$programmer    \
    -ex 'monitor tpwr '$programmer_power        \
    -ex 'monitor swdp_scan'                     \
    -ex 'attach 1'                              \
    -ex 'load '$binary                          \
    -ex 'compare-sections'";

  flash_out=`eval $flash_cmd 2>&1`;
  echo ${flash_out} | grep -vqE 'warning|fail|Error|MIS-MATCHED|"monitor" command not supported by this target';
  if [[ $? -eq 0 ]]; then
    printf "${flash_out}\n"
    return 0;
  else
    printf "${flash_out}\n"
    return 1;
  fi
}

playsound() {
  if hash aplay 2>/dev/null
  then
    aplay -q $@;
  elif hash play 2>/dev/null
  then
    play -q $@;
  else
    printf "$_ERROR_ No WAV player detected\n";
  fi
}

check_linux_serial_permissions() {
  # For Linux - check user has permissions to the serial port (required for Black Magic Probe)
  if [ ${host_platform} == "linux" ]; then
    groups $USER | grep -q 'dialout'
    if [[ ! $? -eq 0 ]]; then
        printf "$_ERROR_ Current user is not in dialout group, you'll need this to use the programmer!\n";
        printf " * eg. for Ubuntu/Debian: 'sudo gpasswd --add "$USER" dialout'\n";
        exit 1
    fi
  fi
}

## Read Flags
OPTIND=1
while getopts ":SP" opt; do
  case "$opt" in
    S) # Sound
      opt_sound=true
      ;;
    P) # Sound
      opt_power=true
      ;;
    ?) # Illegal Option
      echo -e "$_ERROR_ Illegal option '$OPTARG'"
      exit 3
      ;;
  esac
done
for i in `seq 2 $OPTIND`; do shift; done

binary="${1}.elf"

if [ "$binary" == ".elf" ];
then
  binary="$(ls -t builds/*.elf | head -1)"
  if [[ ! -f $binary ]]; then
    echo -e "$_ERROR_ No suitable builds found!"
    exit 1
  fi
  echo -e "$_INFO_ Most recent build selected"
else
  if [[ ! -f $binary ]]; then
    echo -e "$_ERROR_ Binary $binary not found!"
    exit 1
  fi
fi

echo -e "$_INFO_  - File: ${binary}"

if [ `date "+%Y-%m-%d"` == `date -r ${binary} "+%Y-%m-%d"` ];
then
  echo -e "$_INFO_  - Compiled today `date -r ${binary} "+%H:%M:%S"`";
else
  echo -e "$_INFO_  - Compiled `date -r ${binary} "+%Y-%m-%d %H:%M:%S"`";
fi

if programmer="`locate_black_magic`";
then
  printf "$_INFO_ Black Magic Probe found. Flashing..\n";
	flash_target \
  && {
    printf "$_INFO_$COLOUR_GREEN Device Flash successful$COLOUR_OFF\n"
    if $opt_sound; then playsound tools/flash.wav; fi
  } || {
    printf "$_ERROR_$COLOUR_RED Device Flash Failed$COLOUR_OFF\n" \
    && exit 1
  }
else
  printf "$_INFO_ ${COLOUR_YELLOW}Black Magic Probe not found, trying ST-Link..${COLOUR_OFF}\n"
	binary=builds/"$(basename "$binary" .elf).bin"
	printf "$_INFO_ Using bin file with st-flash: ${binary}\n"
	st-flash write $binary 0x8000000 \
  && {
    printf "$_INFO_$COLOUR_GREEN Device Flash successful$COLOUR_OFF\n"
    if $opt_sound; then playsound tools/flash.wav; fi
  } || {
    printf "$_ERROR_$COLOUR_RED Device Flash Failed$COLOUR_OFF\n" \
    && exit 1
  }
fi
